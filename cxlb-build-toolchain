#!/bin/bash

set -e

SCRIPTLOCATION=$(cd $(dirname "$0"); pwd)
COMMANDLINE="$0 $@"
BUILDTITLE="$(date -u) - $(uname -a) : $COMMANDLINE"

XILINX_LABTOOL_PACKAGE="Xilinx_LabTools_14.7_1015_1"
DIGILENT_RUNTIME_PACKAGE="digilent.adept.runtime_2.15.3-x86_64"
DIGILENT_UTILITIES_PACKAGE="digilent.adept.utilities_2.1.1-x86_64"
DIGILENT_PLUGIN_PACKAGE="libCseDigilent_2.5.2-x86_64"
#FTDI_DRIVER_PACKAGE="libftd2xx1.1.12"
NUTAQ_ADP_PACKAGE="nutaq-adp6-microtca-sdk-6-5-0-1-amd64"

usage() {
    cat <<EOF
`basename $0` [options] <compile_dir> <install_dir>

  parameters:

    <compile_dir> : where to download / comile gnuradio and other
                    packages
    <install_dir> : where to install gnuradio and other packages

  options:

    -s <STEPS> : manually select the list of steps to execute (defaults:
                 $STEPS)
    -P : add nutaq steps ($NUTAQ_STEPS)
    -p : pull latest updates from remote git repos
    -i <FILE> : checkout packages versions from bundle file <FILE>
    -n : no build, only repository operations
    -N : no ckeckout from bundle file nor from defaults branch heads,
         do not touch the source repositories
    -c : clean build dir before build
    -h : this help

This scripts packages the cortexlab toolchain. It is for linux-amd64
only.

Prior to running it you must:

- purge packages:

  gnuradio-* libgruel-* libgruel* libgruel0* libgnuradio*
  python-gnuradio*

- install packages:

  libfontconfig1-dev libxrender-dev libpulse-dev swig g++ automake
  autoconf libtool python-dev libfftw3-dev libcppunit-dev
  libboost-all-dev libusb-dev libusb-1.0-0-dev fort77 libsdl1.2-dev
  python-wxgtk2.8 git-core libqt4-dev python-numpy ccache
  python-opengl libgsl0-dev python-cheetah python-lxml
  qt4-dev-tools libqwt5-qt4-dev libqwtplot3d-qt4-dev pyqt4-dev-tools
  python-qwt5-qt4 cmake git-core wget libxi-dev python-docutils
  gtk2-engines-pixbuf r-base-dev python-tk liborc-0.4-0 liborc-0.4-dev
  libasound2-dev python-gtk2 libportaudio2 portaudio19-dev
  ca-certificates xalan libpcap0.8-dev libmpfr4 libgmp10

- to be able to build documentation, install packages:

  doxygen

- for step xilinx you need to have

  ${XILINX_LABTOOL_PACKAGE}.tar.gz

  in <install_dir>/xilinx/

- for step digilent you need to have

  ${DIGILENT_RUNTIME_PACKAGE}.tar.gz
  ${DIGILENT_UTILITIES_PACKAGE}.tar.gz
  ${DIGILENT_PLUGIN_PACKAGE}.tar.gz

  in <install_dir>/digilent/

- for step nutaq you need to have

  ${NUTAQ_ADP_PACKAGE}.deb

  in <install_dir>/nutaq/

EOF
}

package_banner() {
    # display a build banner for a package.
    # param 1: the string to display
    echo -e "\n------------------------------------------------------------------------\n"
    echo -e "$@"
    echo -e "\n------------------------------------------------------------------------\n"
}

get_tag() {
    # output to stdout the current git commit sha,
    # or a pseudo dev commit + a display a warning on stderr if the tree was touched
    # param 1: the git directory
    DIR="$1"
    pushd "$DIR" > /dev/null
    if git diff-index --quiet HEAD ; then
        TAG=$(git log --pretty=format:'%H' -n 1)
    else
        echo "ERROR: $dir working tree not commited" 1>&2
        TAG=$(date +dev-%s)
    fi
    popd > /dev/null
    echo "$TAG"
}

update_git() {
    # clone / update a git repository.
    # Optionnaly pull from it.
    # by default checkout a default branch,
    # or a specific commit if a bundle file is read
    # if $NOCHECKOUT, no checkout performed.
    # outputs a line if a bundle file is written
    # param 1: repository path/url
    # param 2: the branch or commit to checkout
    REPO=$1
    DEFAULTCHECKOUT=$2
    DIR=$(basename "$REPO")
    echo "### update_git from $REPO in $(readlink -f $DIR)"
    if [ ! -d "$DIR" ] ; then
        git clone "$REPO" "$DIR"
    fi
    if [ "$NOCHECKOUT" != "0" ] ; then
        pushd "$DIR" > /dev/null
        if [ "$BUNDLEIN" != "" ] ; then
            TAG=$(sed -n "s/$DIR=\(.*\)/\1/p" "$BUNDLEIN")
            if [ "$TAG" == "" ] ; then
                TAG="$DEFAULTCHECKOUT"
            fi
            git checkout "$TAG"
        else
            git checkout "$DEFAULTCHECKOUT"
        fi
        if [ $PULL -eq 0 ] ; then
            git pull
        fi
        popd > /dev/null
    fi
    if [ "$BUNDLEOUT" != "" ] ; then
        sed -i "/^$DIR=/d" "$BUNDLEOUT"
        echo "$DIR="$(get_tag "$DIR") >> "$BUNDLEOUT"
    fi
}

cmake_build() {
    # configure/make/install a package.
    # param 1: the build path
    # remaining params: cmake options
    BUILDDIR="$1"
    CMAKE_OPTS="$@"
    echo "### cmake_build in $BUILDDIR with options $COMMON_CMAKE_OPTS $CMAKE_OPTS"
    if [ "$CLEANBUILD" == "0" ] ; then
        rm -rf "$BUILDDIR"
    fi
    mkdir -p "$BUILDDIR"
    pushd "$BUILDDIR" > /dev/null
    eval "$SET_CXLB_TOOLCHAIN_ENV"
    cmake $COMMON_CMAKE_OPTS $CMAKE_OPTS ../
    #make VERBOSE=1
    make
    make install
    popd > /dev/null
}

do_step_p() {
    # using var $STEPS, return wether a step has to be executed
    # param 1: step name
    # returns 0 if step needs to be executed
    echo $STEPS | grep -q '\(\s\|^\)'$1'\(\s\|$\)'
}

step() {
    # checks if a step needs to be performed. If yes, display a step banner and return 0
    # param 1: step name
    STEP="$1"
    do_step_p "$STEP" && package_banner "$STEP"
}

git_step() {
    # build step preamble: update git, and return 0 if the actual build has to proceed
    # param 1: step name
    # param 2: git repository url
    # param 3: default branch or commit to checkout
    STEP="$1"
    REPOS="$2"
    DEFAULTCHECKOUT="$3"
    step "$STEP" && (
        update_git "$REPOS" "$DEFAULTCHECKOUT"
        [ "$ONLYGIT" != "0" ]
    )
}

nogit_step() {
    # build step preamble for steps without git
    # param 1: step name
    STEP="$1"
    [ "$ONLYGIT" != "0" ] && step "$STEP"
}

grc_build_hier_block() {
    # build a gnuradio-companion hierarchical block
    # param 1: grc filename
    GRC=$1
    STEM=${GRC%.grc}
    eval "$SET_CXLB_TOOLCHAIN_ENV"
    grcc -d . $STEM.grc

    # WARN: currently option -d does not work -> compiled .py and
    # .py.xml go in ~/.grc_gnuradio, hence the following hack
    cp ~/.grc_gnuradio/$STEM.py ~/.grc_gnuradio/$STEM.py.xml .

    # the following hack to fix what seems to be a strange bug of
    # grcc, which occurs only in some circumstances, where the python
    # imports are not correct
    xalan -xsl $SCRIPTLOCATION/fix_xml.xsl -param pythondir "'$NEWPYTHONPATH'" -param modulename "'$STEM'" < $STEM.py.xml > $STEM.py.xml.tmp
    mv $STEM.py.xml.tmp $STEM.py.xml

    cp $STEM.py "$NEWPYTHONPATH"
    cp $STEM.py.xml $INSTALL_DIR/share/gnuradio/grc/blocks/
}

skip_annoying_prompts() {
    # generate 50 sequences of (2000 newlines followed by 100 "Y")
    for Y in $(seq 1 50) ; do
        for X in $(seq 1 2000) ; do
            echo
        done
        for X in $(seq 1 100) ; do
            echo Y
        done
    done
}

find_files() {
    DIR="$1" ; shift
    FILES="$@"
    find $DIR | grep -f <(echo "$FILES" | tr ' ' '\n')
}

NOCHECKOUT=1
PULL=1
NUTAQ_STEPS="xilinx digilent adp gr-cortexlab"
STEPS="uhd rtl-sdr gnuradio gr-iqbal bladerf hackrf gr-osmosdr uhd-firmware fft-web"
BUNDLEIN=""
ONLYGIT=1
CLEANBUILD=1
LOG=0
while getopts "PNn:i:s:pch" OPT; do
    case $OPT in
        P) STEPS="$STEPS $NUTAQ_STEPS" ;;
        N) NOCHECKOUT=0 ;;
        n) ONLYGIT=0 ;;
        i) BUNDLEIN=$(readlink -f "$OPTARG") ;;
        s) STEPS="$OPTARG" ;;
        p) PULL=0 ;;
        c) CLEANBUILD=0 ;;
        h) usage ; exit 0 ;;
        *) usage ; exit 1 ;;
    esac
done
shift $((OPTIND-1))
if [ $# -ne 2 ] ; then
    usage
    exit 1
fi
SOURCES_DIR="$(mkdir -p "$1" ; cd "$1" ; pwd)"
INSTALL_DIR="$(mkdir -p "$2" ; cd "$2" ; pwd)"

if [ $LOG -eq 0 ] ; then
    mkdir -p "$INSTALL_DIR/share/$(basename $0)"
    LOGFILE="$INSTALL_DIR/share/$(basename $0)/build.log"
    echo "# $BUILDTITLE" >> "$LOGFILE"
    exec > >(tee -a "$LOGFILE")
    exec 2>&1
fi

mkdir -p "$INSTALL_DIR/share/$(basename $0)"
BUNDLEOUT="$INSTALL_DIR/share/$(basename $0)/build.bundle"

#COMMON_CMAKE_OPTS="-DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR"
COMMON_CMAKE_OPTS="-DCMAKE_INSTALL_PREFIX=$INSTALL_DIR"

if [ "$BUNDLEOUT" != "" ] ; then
    echo "# $BUILDTITLE" >> "$BUNDLEOUT"
fi

export NEWPYTHONPATH="$INSTALL_DIR/"$(python -c "import sys,os; print os.sep.join(['lib', 'python' + sys.version[:3], 'dist-packages'])")
SET_CXLB_TOOLCHAIN_ENV=$(cat <<EOF
export PYTHONPATH="$NEWPYTHONPATH\${PYTHONPATH:+:\${PYTHONPATH}}"
export LD_LIBRARY_PATH="$INSTALL_DIR/lib\${LD_LIBRARY_PATH:+:\${LD_LIBRARY_PATH}}"
export PATH="$INSTALL_DIR/bin\${PATH:+:\${PATH}}"
export MANPATH="$INSTALL_DIR/share/man\${MANPATH:+:\${MANPATH}}"
export PKG_CONFIG_PATH="$INSTALL_DIR/lib/pkgconfig\${PKG_CONFIG_PATH:+:\${PKG_CONFIG_PATH}}"
export CMAKE_MODULE_PATH="$INSTALL_DIR/lib/cmake\${CMAKE_MODULE_PATH:+:\${CMAKE_MODULE_PATH}}"
for L in \$(find "$INSTALL_DIR/opt/Xilinx" -path '*/common/lib/lin64' 2>/dev/null) ; do export LD_LIBRARY_PATH="\$L\${LD_LIBRARY_PATH:+:\${LD_LIBRARY_PATH}}" ; done
for P in \$(find "$INSTALL_DIR/opt/Xilinx" -path '*/common/bin/lin64' 2>/dev/null) ; do export PATH="\$P\${PATH:+:\${PATH}}" ; done
for L in \$(find "$INSTALL_DIR/opt/Xilinx" -path '*/LabTools/lib/lin64' 2>/dev/null) ; do export LD_LIBRARY_PATH="\$L\${LD_LIBRARY_PATH:+:\${LD_LIBRARY_PATH}}" ; done
for P in \$(find "$INSTALL_DIR/opt/Xilinx" -path '*/LabTools/bin/lin64' 2>/dev/null) ; do export PATH="\$P\${PATH:+:\${PATH}}" ; done
export DIGILENT_ADEPT_CONF="$INSTALL_DIR/etc/digilent-adept.conf"
export XLNX_DIGILENT_ADEPT_CONF="$INSTALL_DIR/etc/digilent-adept.conf"
for L in \$(find "$INSTALL_DIR/opt/Nutaq" -path '*/sdk/lib64' 2>/dev/null) ; do export LD_LIBRARY_PATH="\$L\${LD_LIBRARY_PATH:+:\${LD_LIBRARY_PATH}}" ; done
for P in \$(find "$INSTALL_DIR/opt/Nutaq" -path '*/sdk/bin' 2>/dev/null) ; do export PATH="\$P\${PATH:+:\${PATH}}" ; done
EOF
)

if [ ! -d "$SOURCES_DIR" ] ; then
    mkdir -p $SOURCES_DIR
fi
cd $SOURCES_DIR

# ------------------------------------------------------------------------
# uhd
# http://code.ettus.com/redmine/ettus/projects/uhd/wiki
# http://code.ettus.com/redmine/ettus/projects/uhd/wiki/UHD_Build
# install des dépendances
# aptitude install libboost-all-dev libusb-1.0-0-dev python-cheetah doxygen python-docutils
# en réalité juste libusb-1.0-0-dev
git_step "uhd" "git://github.com/EttusResearch/uhd.git" "master" && (
    cmake_build uhd.git/host/build
)

# ------------------------------------------------------------------------
# rtl-sdr osmocom
# http://sdr.osmocom.org/trac/wiki/rtl-sdr
git_step "rtl-sdr" "git://git.osmocom.org/rtl-sdr.git" "master" && (
    cmake_build rtl-sdr.git/build
    mkdir -p "$INSTALL_DIR/etc/udev/rules.d/"
    cp "$SOURCES_DIR/rtl-sdr.git/rtl-sdr.rules" "$INSTALL_DIR/etc/udev/rules.d/"
)

# ------------------------------------------------------------------------
# gnuradio
# http://gnuradio.org/redmine/projects/gnuradio/wiki/InstallingGRFromSource#Installing-manually-from-source
# http://gnuradio.org/redmine/projects/gnuradio/wiki/BuildGuide
# http://gnuradio.org/doc/doxygen/build_guide.html
# install des dépendances
# aptitude install libfontconfig1-dev libxrender-dev libpulse-dev swig g++ automake autoconf libtool python-dev libfftw3-dev libcppunit-dev libboost-all-dev libusb-dev libusb-1.0-0-dev fort77 libsdl1.2-dev python-wxgtk2.8 git-core libqt4-dev python-numpy ccache python-opengl libgsl0-dev python-cheetah python-lxml doxygen qt4-dev-tools libusb-1.0-0-dev libqwt5-qt4-dev libqwtplot3d-qt4-dev pyqt4-dev-tools python-qwt5-qt4 cmake git-core wget libxi-dev python-docutils gtk2-engines-pixbuf r-base-dev python-tk liborc-0.4-0 liborc-0.4-dev libasound2-dev python-gtk2 libportaudio2 portaudio19-dev ca-certificates
# en réalité juste libcppunit-dev fort77 libqt4-dev ccache libgsl0-dev qt4-dev-tools libqwt5-qt4-dev libqwtplot3d-qt4-dev pyqt4-dev-tools python-qwt5-qt4 r-base-dev liborc-0.4-dev portaudio19-dev
git_step "gnuradio" "http://git.gnuradio.org/git/gnuradio.git" "maint" && (
    cmake_build gnuradio.git/build
)

# ------------------------------------------------------------------------
# gr-iqbal
# http://git.osmocom.org/gr-iqbal
git_step "gr-iqbal" "git://git.osmocom.org/gr-iqbal.git" "master" && (
    ( cd gr-iqbal.git ; git submodule init ; git submodule update )
    cmake_build gr-iqbal.git/build
)

# ------------------------------------------------------------------------
# bladeRF
# http://www.nuand.com/bladeRF
git_step "bladerf" "https://github.com/Nuand/bladeRF.git" "master" && (
    cmake_build bladeRF.git/host/build -DINSTALL_UDEV_RULES=ON -DUDEV_RULES_PATH="$INSTALL_DIR/etc/udev/rules.d/"
)

# ------------------------------------------------------------------------
# hackrf
# https://github.com/mossmann/hackrf
git_step "hackrf" "https://github.com/mossmann/hackrf.git" "master" && (
    cmake_build hackrf.git/host/build
    mkdir -p "$INSTALL_DIR/etc/udev/rules.d"
    cp "$SOURCES_DIR/hackrf.git/host/libhackrf/53-hackrf.rules" "$INSTALL_DIR/etc/udev/rules.d/"
)

# ------------------------------------------------------------------------
# gr-osmosdr osmocom
# http://sdr.osmocom.org/trac/wiki/GrOsmoSDR
git_step "gr-osmosdr" "git://git.osmocom.org/gr-osmosdr.git" "master" && (
    cmake_build gr-osmosdr.git/build
)

# ------------------------------------------------------------------------
# uhd firmware update
nogit_step "uhd-firmware" && (
    $INSTALL_DIR/lib/uhd/utils/uhd_images_downloader.py
)

# ------------------------------------------------------------------------
# fft-web
git_step "fft-web" "https://github.com/CorteXlab/fft-web.git" "master" && (
    cd fft-web.git/grc
    grc_build_hier_block fft_web.grc
)

# ------------------------------------------------------------------------
# xilinx
# download Xilinx_LabTools_14.3_P.40xd.6.0.tar or
# Xilinx_LabTools_14.7_1015_1.tar from
# http://www.xilinx.com/support/download/index.html/content/xilinx/en/downloadNav/design-tools/v2012_3---14_3.html
# (need an account)
nogit_step "xilinx" && (
    cd xilinx
    # rm previous install (or installer will refuse to proceed)
    rm -rf "$INSTALL_DIR/opt/Xilinx"
    TMPDIR="$(mkdir -p tmp ; cd tmp ; pwd)"
    rm -f "$TMPDIR/batchscript"
    if [ ! -d "$XILINX_LABTOOL_PACKAGE" ] ; then tar xf "${XILINX_LABTOOL_PACKAGE}.tar" ; fi
    cd "$XILINX_LABTOOL_PACKAGE/bin/lin64"
    ./batchxsetup --samplebatchscript "$TMPDIR/batchscript"
    sed -i -e "s&destination_dir=.*&destination_dir=$INSTALL_DIR/opt/Xilinx&" "$TMPDIR/batchscript"
    skip_annoying_prompts | ./batchxsetup --batch "$TMPDIR/batchscript"
    # fix libs shipped with xilinx conflicting with system libs
    BADLIBS="libstdc++\.so.* libmpfr\.so.* libgmp\.so.* libusb-1.0\.so.*"
    find_files $INSTALL_DIR/opt/Xilinx $BADLIBS | grep lin64 | xargs rm
    # fix perms
    chmod -R go-w "$INSTALL_DIR/opt/Xilinx"
)

# ------------------------------------------------------------------------
# digilent
# download digilent.adept.runtime_2.15.3-x86_64.tar.gz and
# digilent.adept.utilities_2.1.1-x86_64.tar.gz from
# http://www.digilentinc.com/Products/Detail.cfm?Prod=ADEPT2 and
# libCseDigilent_2.5.2-x86_64.tar.gz from
# http://www.digilentinc.com/Products/Detail.cfm?NavPath=2,66,768&Prod=DIGILENT-PLUGIN
# and libftd2xx1.1.12.tar.gz from
# http://www.ftdichip.com/Drivers/D2XX.htm
nogit_step "digilent" && (
    cd digilent

    # # FTDI driver
    #
    # Commented since current standalone FTDI (1.1.12) drivers does not work on debian squeeze,
    # so we use version 1.0.4 shipped with digilent runtime 2.15.3
    #
    # if [ ! -d "$FTDI_DRIVER_PACKAGE" ] ; then
    #     (
    #         mkdir "$FTDI_DRIVER_PACKAGE"
    #         cd "$FTDI_DRIVER_PACKAGE"
    #         tar xzf "../${FTDI_DRIVER_PACKAGE}.tar.gz"
    #     )
    # fi
    # FTDILIB=$(echo $FTDI_DRIVER_PACKAGE/release/build/x86_64/libftd2xx.so.*)
    # mkdir -p "$INSTALL_DIR/lib"
    # cp $FTDILIB "$INSTALL_DIR/lib"
    # ( cd "$INSTALL_DIR/lib" ; ln -fs $(basename $FTDILIB) libftd2xx.so )

    # digilent runtime, including the FTDI driver shipped with it
    if [ ! -d "$DIGILENT_RUNTIME_PACKAGE" ] ; then tar xzf "${DIGILENT_RUNTIME_PACKAGE}.tar.gz" ; fi
    (
        cd "$DIGILENT_RUNTIME_PACKAGE"
        # FTDI2XX lib
        FTDILIB=$(echo ftdi.drivers_*/lib64/libftd2xx.so.*)
        mkdir -p "$INSTALL_DIR/lib"
        cp $FTDILIB "$INSTALL_DIR/lib"
        ( cd "$INSTALL_DIR/lib" ; ln -fs $(basename $FTDILIB) libftd2xx.so )
        # digilent runtime
        mkdir -p "$INSTALL_DIR/etc"
        echo "$INSTALL_DIR/etc" | ./install.sh datapath=$INSTALL_DIR/share/digilent/data libpath=$INSTALL_DIR/lib sbinpath=$INSTALL_DIR/bin || true
    )
    mkdir -p "$INSTALL_DIR/etc/udev/rules.d"
    cp "$SOURCES_DIR/digilent/$DIGILENT_RUNTIME_PACKAGE/52-digilent-usb.rules" "$INSTALL_DIR/etc/udev/rules.d/"
    # digilent utilities
    if [ ! -d "$DIGILENT_UTILITIES_PACKAGE" ] ; then tar xzf "${DIGILENT_UTILITIES_PACKAGE}.tar.gz" ; fi
    mkdir -p "$INSTALL_DIR/bin"
    cp $DIGILENT_UTILITIES_PACKAGE/bin64/* "$INSTALL_DIR/bin"
    mkdir -p "$INSTALL_DIR/share/man/man1"
    cp $DIGILENT_UTILITIES_PACKAGE/man/*.1 "$INSTALL_DIR/share/man/man1"
    # digilent plugin to xilinx labtool to enable use of HS2 with impact
    if [ ! -d "$DIGILENT_PLUGIN_PACKAGE" ] ; then tar xzf "${DIGILENT_PLUGIN_PACKAGE}.tar.gz" ; fi
    XILINX_PLUGIN_PATH=$(echo $INSTALL_DIR/opt/Xilinx/*/LabTools/LabTools/lib/lin64/plugins)
    mkdir -p $XILINX_PLUGIN_PATH/Digilent/libCseDigilent
    cp $DIGILENT_PLUGIN_PACKAGE/ISE14x/plugin/* $XILINX_PLUGIN_PATH/Digilent/libCseDigilent
)

# ------------------------------------------------------------------------
# adp
# download adp µtca debian package from http://nutaq.com/en/support/latest-utca-edition:
# http://nutaq.com/sites/default/files/files-support/utca-6-5-0/nutaq-adp6-microtca-sdk-6-5-0-1-amd64.deb
# http://nutaq.com/sites/default/files/files-support/utca-6-4-0/nutaq-adp6-microtca-sdk_6-4-0-2_amd64.deb
#TODO: add pathes
nogit_step "adp" && (
    cd nutaq
    # adp software tools µtca
    dpkg -x $NUTAQ_ADP_PACKAGE.deb $INSTALL_DIR
    # gr-nutaq
    # ~/opt/gnuradio.test.adp/opt/Nutaq/ADP6/ADP_MicroTCA/sdk/gnuradio/gr-nutaq
    sed -i -e "s*set(NUTAQ_SDKROOT \"/opt/Nutaq/ADP6/ADP_MicroTCA/sdk\")*set(NUTAQ_SDKROOT \"$INSTALL_DIR/opt/Nutaq/ADP6/ADP_MicroTCA/sdk\")*" $INSTALL_DIR/opt/Nutaq/ADP6/ADP_MicroTCA/sdk/gnuradio/gr-nutaq/lib/CMakeLists.txt
    sed -i -e "s*set(NUTAQ_SDKROOT \"/opt/Nutaq/ADP6/ADP_MicroTCA/sdk\")*set(NUTAQ_SDKROOT \"$INSTALL_DIR/opt/Nutaq/ADP6/ADP_MicroTCA/sdk\")*" $INSTALL_DIR/opt/Nutaq/ADP6/ADP_MicroTCA/sdk/gnuradio/gr-nutaq/swig/CMakeLists.txt
    cmake_build $INSTALL_DIR/opt/Nutaq/ADP6/ADP_MicroTCA/sdk/gnuradio/gr-nutaq/build -DNUTAQ_SDKROOT="$INSTALL_DIR/opt/Nutaq/ADP6/ADP_MicroTCA/sdk"
)

# ------------------------------------------------------------------------
# gr-cortexlab
git_step "gr-cortexlab" "https://github.com/CorteXlab/gr-cortexlab.git" "master" && (
    cmake_build gr-cortexlab.git/build
    cd gr-cortexlab.git/grc
    for GRC in *.grc ; do
        grc_build_hier_block $GRC
    done
)

# ------------------------------------------------------------------------
# generate conf files
mkdir -p "$INSTALL_DIR/etc/ld.so.conf.d"

ADDITIONAL_LIBS=""
for L in $(find "$INSTALL_DIR/opt/Xilinx" -path '*/common/lib/lin64' 2>/dev/null) ; do ADDITIONAL_LIBS=$( echo -e "$L${ADDITIONAL_LIBS:+\n${ADDITIONAL_LIBS}}") ; done
for L in $(find "$INSTALL_DIR/opt/Xilinx" -path '*/LabTools/lib/lin64' 2>/dev/null) ; do ADDITIONAL_LIBS=$( echo -e "$L${ADDITIONAL_LIBS:+\n${ADDITIONAL_LIBS}}") ; done
for L in $(find "$INSTALL_DIR/opt/Nutaq" -path '*/sdk/lib64' 2>/dev/null) ; do ADDITIONAL_LIBS=$( echo -e "$L${ADDITIONAL_LIBS:+\n${ADDITIONAL_LIBS}}") ; done
cat > "$INSTALL_DIR/etc/ld.so.conf.d/cxlb-toolchain.conf" <<EOF
# ------------------------------------------------------------------------
# library search path configuration for cortexlab toolchain installed
# in $INSTALL_DIR
# ------------------------------------------------------------------------

$INSTALL_DIR/lib
$ADDITIONAL_LIBS

EOF

mkdir -p "$INSTALL_DIR/bin"
cat > "$INSTALL_DIR/bin/cxlb-toolchain-system-conf" <<EOF
#!/bin/bash

# ------------------------------------------------------------------------
# script to be run as root to perform system-wide configurations
# ------------------------------------------------------------------------

ln -fs $INSTALL_DIR/etc/ld.so.conf.d/cxlb-toolchain.conf /etc/ld.so.conf.d/cxlb-toolchain.conf
ldconfig

# - usrp:
#
#   optional steps:
#
#   - add group usrp:
#
#     $ addgroup usrp
#
#   - add needed users to this group:
#
#     $ adduser <login> usrp
#
#   - set some sysctl. In /etc/sysctl.conf:
#
#     net.core.rmem_max = 1000000
#     net.core.wmem_max = 1000000
#     kernel.shmmax = 2147483648
#
#     and for immediate setting:
#
#     $ sudo sysctl -w net.core.rmem_max=1000000 >/dev/null 2>&1
#     $ sudo sysctl -w net.core.wmem_max=1000000 >/dev/null 2>&1
#     $ sudo sysctl -w kernel.shmmax=2147483648  >/dev/null 2>&1
#
#   - set rtprio for members of group usrp. In /etc/security/limits.conf:
#
#     @usrp  - rtprio 50
#
#     (need to logout / login to activate this)

# - rtl-sdr:

if [ -f "$INSTALL_DIR/etc/udev/rules.d/rtl-sdr.rules" ] ; then
  ln -fs "$INSTALL_DIR/etc/udev/rules.d/rtl-sdr.rules" "/etc/udev/rules.d/rtl-sdr.rules"
fi

# - bladeRF:

if [ -f "$INSTALL_DIR/etc/udev/rules.d/88-nuand.rules" ] ; then
  ln -fs "$INSTALL_DIR/etc/udev/rules.d/88-nuand.rules" "/etc/udev/rules.d/88-nuand.rules"
fi

# - hackrf:

if [ -f "$INSTALL_DIR/etc/udev/rules.d/53-hackrf.rules" ] ; then
  ln -fs "$INSTALL_DIR/etc/udev/rules.d/53-hackrf.rules" "/etc/udev/rules.d/53-hackrf.rules"
fi

# - digilent HS2:

if [ -f "$INSTALL_DIR/etc/udev/rules.d/52-digilent-usb.rules" ] ; then
  ln -fs "$INSTALL_DIR/etc/udev/rules.d/52-digilent-usb.rules" "/etc/udev/rules.d/52-digilent-usb.rules"
fi

# - if any udev rule was modified or added, reload rules:

udevadm control --reload-rules

EOF
chmod a+x "$INSTALL_DIR/bin/cxlb-toolchain-system-conf"

cat > "$INSTALL_DIR/bin/cxlb-toolchain-user-conf" <<EOF
#!/bin/bash

# ------------------------------------------------------------------------
# script to be sourced by a user to configure its environment to use
# the toolchain
# ------------------------------------------------------------------------

$SET_CXLB_TOOLCHAIN_ENV

EOF

cat <<EOF

------------------------------------------------------------------------

- look at, and run as root $INSTALL_DIR/bin/cxlb-toolchain-system-conf
  for system-wide configurations to use the toolchain

- source $INSTALL_DIR/bin/cxlb-toolchain-user-conf
  for environment configuration to use the toolchain

------------------------------------------------------------------------
EOF
