#!/bin/bash

set -e

SCRIPTLOCATION=$(cd $(dirname "$0"); pwd)

usage() {
    cat <<EOF
`basename $0` [options] <compile_dir> <install_dir>

  parameters:

    <compile_dir> : where to download / comile gnuradio and other
                    packages
    <install_dir> : where to install gnuradio and other packages

  options:

    -s <STEPS> : manually select the list of steps to execute (defaults:
                 $STEPS)
    -p : pull latest updates from remote git repos
    -o <FILE> : output all packages versions to the bundle file <FILE>
    -i <FILE> : checkout packages versions from bundle file <FILE>
    -n : no build, only repository operations
    -N : no ckeckout from bundle file nor from defaults branch heads,
         do not touch the source repositories
    -c : clean build dir before build
    -h : this help

This scripts packages gnuradio + additional gnuradio contrib packages

Prior to running it you must:

- purge packages:

  gnuradio-* libgruel-* libgruel* libgruel0* libgnuradio*
  python-gnuradio*

- install packages:

  libfontconfig1-dev libxrender-dev libpulse-dev swig g++ automake
  autoconf libtool python-dev libfftw3-dev libcppunit-dev
  libboost-all-dev libusb-dev libusb-1.0-0-dev fort77 libsdl1.2-dev
  python-wxgtk2.8 git-core libqt4-dev python-numpy ccache
  python-opengl libgsl0-dev python-cheetah python-lxml doxygen
  qt4-dev-tools libusb-1.0-0-dev libqwt5-qt4-dev libqwtplot3d-qt4-dev
  pyqt4-dev-tools python-qwt5-qt4 cmake git-core wget libxi-dev
  python-docutils gtk2-engines-pixbuf r-base-dev python-tk
  liborc-0.4-0 liborc-0.4-dev libasound2-dev python-gtk2 libportaudio2
  portaudio19-dev ca-certificates xalan

EOF
}

package_banner() {
    # display a build banner for a package.
    # param 1: the string to display
    echo -e "\n------------------------------------------------------------------------\n"
    echo -e "$@"
    echo -e "\n------------------------------------------------------------------------\n"
}

get_tag() {
    # output to stdout the current git commit sha,
    # or a pseudo dev commit + a display a warning on stderr if the tree was touched
    # param 1: the git directory
    DIR="$1"
    pushd "$DIR" > /dev/null
    if git diff-index --quiet HEAD ; then
        TAG=$(git log --pretty=format:'%H' -n 1)
    else
        echo "ERROR: $dir working tree not commited" 1>&2
        TAG=$(date +dev-%s)
    fi
    popd > /dev/null
    echo "$TAG"
}

update_git() {
    # clone / update a git repository.
    # Optionnaly pull from it.
    # by default checkout a default branch,
    # or a specific commit if a bundle file is read
    # if $NOCHECKOUT, no checkout performed.
    # outputs a line if a bundle file is written
    # param 1: repository path/url
    # param 2: the branch or commit to checkout
    REPO=$1
    DEFAULTCHECKOUT=$2
    DIR=$(basename "$REPO")
    echo "### update_git from $REPO in $(readlink -f $DIR)"
    if [ -d "$DIR" ] ; then
        pushd "$DIR" > /dev/null
        if [ $PULL -eq 0 ] ; then git pull ; fi
        popd > /dev/null
    else
        git clone "$REPO" "$DIR"
    fi
    if [ "$NOCHECKOUT" != "0" ] ; then
        if [ "$BUNDLEIN" != "" ] ; then
            pushd "$DIR" > /dev/null
            TAG=$(sed -n "s/$DIR=\(.*\)/\1/p" "$BUNDLEIN")
            if [ "$TAG" == "" ] ; then
                TAG="$DEFAULTCHECKOUT"
            fi
            git checkout "$TAG"
            popd > /dev/null
        else
            pushd "$DIR" > /dev/null
            git checkout "$DEFAULTCHECKOUT"
            popd > /dev/null
        fi
    fi
    if [ "$BUNDLEOUT" != "" ] ; then
        echo "$DIR="$(get_tag "$DIR") >> "$BUNDLEOUT"
    fi
}

cmake_build() {
    # configure/make/install a package.
    # param 1: the build path
    # remaining params: cmake options
    BUILDDIR="$1"
    CMAKE_OPTS="$@"
    echo "### cmake_build in $BUILDDIR with options $COMMON_CMAKE_OPTS $CMAKE_OPTS"
    if [ "$CLEANBUILD" == "0" ] ; then
        rm -rf "$BUILDDIR"
    fi
    mkdir -p "$BUILDDIR"
    pushd "$BUILDDIR" > /dev/null
    cmake $COMMON_CMAKE_OPTS $CMAKE_OPTS ../
    make
    make install
    popd > /dev/null
}

do_step_p() {
    # using var $STEPS, return wether a step has to be executed
    # param 1: step name
    # returns 0 if step needs to be executed
    echo $STEPS | grep -q '\(\s\|^\)'$1'\(\s\|$\)'
}

step() {
    # checks if a step needs to be performed. If yes, display a step banner and return 0
    # param 1: step name
    STEP="$1"
    do_step_p "$STEP" && (
        package_banner "$STEP"
    )
}

build_step() {
    # build step preamble: update git, and return 0 if the actual build has to proceed
    # param 1: step name
    # param 2: git repository url
    # param 3: default branch or commit to checkout
    STEP="$1"
    REPOS="$2"
    DEFAULTCHECKOUT="$3"
    step "$STEP" && (
        update_git "$REPOS" "$DEFAULTCHECKOUT"
        [ "$ONLYGIT" != "0" ]
    )
}

grc_build_hier_block() {
    GRC=$1
    STEM=${GRC%.grc}
    eval $SET_GNURADIO_ENV
    grcc -d . $STEM.grc

    # WARN: currently option -d does not work -> compiled .py and
    # .py.xml go in ~/.grc_gnuradio, hence the following hack
    cp ~/.grc_gnuradio/$STEM.py ~/.grc_gnuradio/$STEM.py.xml .

    # the following hack to fix what seems to be a strange bug of
    # grcc, which occurs only in some circumstances, where the python
    # imports are not correct
    xalan -xsl $SCRIPTLOCATION/fix_xml.xsl -param pythondir "'$GNURADIOPYTHONHOMEPATH'" -param modulename $STEM < $STEM.py.xml > $STEM.py.xml.tmp
    mv $STEM.py.xml.tmp $STEM.py.xml

    cp $STEM.py "$GNURADIOPYTHONHOMEPATH"
    cp $STEM.py.xml $INSTALL_DIR/share/gnuradio/grc/blocks/
}

NOCHECKOUT=1
PULL=1
STEPS="uhd rtl-sdr gnuradio gr-iqbal bladeRF hackRF gr-osmosdr uhd-firmware fft-web gr-cortexlab"
BUNDLEOUT=""
BUNDLEIN=""
ONLYGIT=1
CLEANBUILD=1
while getopts "Nno:i:s:pch" OPT; do
    case $OPT in
        N) NOCHECKOUT=0 ;;
        n) ONLYGIT=0 ;;
        o) BUNDLEOUT=$(readlink -f "$OPTARG") ;;
        i) BUNDLEIN=$(readlink -f "$OPTARG") ;;
        s) STEPS="$OPTARG" ;;
        p) PULL=0 ;;
        c) CLEANBUILD=0 ;;
        h) usage ; exit 0 ;;
        *) usage ; exit 1 ;;
    esac
done
shift $((OPTIND-1))
if [ $# -ne 2 ] ; then
    usage
    exit 1
fi
SOURCES_DIR="$(cd "$1"; pwd)"
INSTALL_DIR="$(cd "$2"; pwd)"

#COMMON_CMAKE_OPTS="-DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR"
COMMON_CMAKE_OPTS="-DCMAKE_INSTALL_PREFIX=$INSTALL_DIR"

if [ "$BUNDLEOUT" != "" ] ; then
    cat /dev/null > "$BUNDLEOUT"
fi

export GNURADIOPYTHONHOMEPATH="$INSTALL_DIR/"$(python -c "import sys,os; print os.sep.join(['lib', 'python' + sys.version[:3], 'dist-packages'])")
SET_GNURADIO_ENV=$(cat <<EOF
export PYTHONPATH="$GNURADIOPYTHONHOMEPATH\${PYTHONPATH:+:\${PYTHONPATH}}"
export LD_LIBRARY_PATH="$INSTALL_DIR/lib\${LD_LIBRARY_PATH:+:\${LD_LIBRARY_PATH}}"
export PATH="$INSTALL_DIR/bin\${PATH:+:\${PATH}}"
export MANPATH="$INSTALL_DIR/share/man\${MANPATH:+:\${MANPATH}}"
export PKG_CONFIG_PATH="$INSTALL_DIR/lib/pkgconfig\${PKG_CONFIG_PATH:+:\${PKG_CONFIG_PATH}}"
EOF
)

MANUAL_OPERATIONS=""

if [ ! -d "$SOURCES_DIR" ] ; then
    mkdir -p $SOURCES_DIR
fi
cd $SOURCES_DIR

# ------------------------------------------------------------------------
# uhd
# http://code.ettus.com/redmine/ettus/projects/uhd/wiki
# http://code.ettus.com/redmine/ettus/projects/uhd/wiki/UHD_Build
# install des dépendances
# aptitude install libboost-all-dev libusb-1.0-0-dev python-cheetah doxygen python-docutils
# en réalité juste libusb-1.0-0-dev
build_step "uhd" "git://github.com/EttusResearch/uhd.git" "master" && (
    cmake_build uhd.git/host/build
)

# ------------------------------------------------------------------------
# rtl-sdr osmocom
# http://sdr.osmocom.org/trac/wiki/rtl-sdr
build_step "rtl-sdr" "git://git.osmocom.org/rtl-sdr.git" "master" && (
    cmake_build rtl-sdr.git/build
    MANUAL_OPERATIONS="${MANUAL_OPERATIONS}- copy ${SOURCES_DIR}/rtl-sdr.git/rtl-sdr.rules to /etc/udev/rules.d/\n\n"
)

# ------------------------------------------------------------------------
# gnuradio
# http://gnuradio.org/redmine/projects/gnuradio/wiki/InstallingGRFromSource#Installing-manually-from-source
# http://gnuradio.org/redmine/projects/gnuradio/wiki/BuildGuide
# http://gnuradio.org/doc/doxygen/build_guide.html
# install des dépendances
# aptitude install libfontconfig1-dev libxrender-dev libpulse-dev swig g++ automake autoconf libtool python-dev libfftw3-dev libcppunit-dev libboost-all-dev libusb-dev libusb-1.0-0-dev fort77 libsdl1.2-dev python-wxgtk2.8 git-core libqt4-dev python-numpy ccache python-opengl libgsl0-dev python-cheetah python-lxml doxygen qt4-dev-tools libusb-1.0-0-dev libqwt5-qt4-dev libqwtplot3d-qt4-dev pyqt4-dev-tools python-qwt5-qt4 cmake git-core wget libxi-dev python-docutils gtk2-engines-pixbuf r-base-dev python-tk liborc-0.4-0 liborc-0.4-dev libasound2-dev python-gtk2 libportaudio2 portaudio19-dev ca-certificates
# en réalité juste libcppunit-dev fort77 libqt4-dev ccache libgsl0-dev qt4-dev-tools libqwt5-qt4-dev libqwtplot3d-qt4-dev pyqt4-dev-tools python-qwt5-qt4 r-base-dev liborc-0.4-dev portaudio19-dev
build_step "gnuradio" "http://git.gnuradio.org/git/gnuradio.git" "maint" && (
    cmake_build gnuradio.git/build
)

# ------------------------------------------------------------------------
# gr-iqbal
# http://git.osmocom.org/gr-iqbal
build_step "gr-iqbal" "git://git.osmocom.org/gr-iqbal.git" "master" && (
    ( cd gr-iqbal.git ; git submodule init ; git submodule update )
    cmake_build gr-iqbal.git/build
)

# ------------------------------------------------------------------------
# bladeRF
# http://www.nuand.com/bladeRF
build_step "bladeRF" "https://github.com/Nuand/bladeRF.git" "master" && (
    cmake_build bladeRF.git/host/build -DINSTALL_UDEV_RULES=OFF
    MANUAL_OPERATIONS="${MANUAL_OPERATIONS}- copy ${SOURCES_DIR}/bladeRF.git/host/build/misc/udev/88-nuand.rules to /etc/udev/rules.d/\n\n"
)

# ------------------------------------------------------------------------
# hackrf
# https://github.com/mossmann/hackrf
build_step "hackRF" "https://github.com/mossmann/hackrf.git" "master" && (
    cmake_build hackrf.git/host/build
    MANUAL_OPERATIONS="${MANUAL_OPERATIONS}- copy ${SOURCES_DIR}/hackrf.git/host/hackrf-tools/52-hackrf.rules to /etc/udev/rules.d/\n\n"
)

# ------------------------------------------------------------------------
# gr-osmosdr osmocom
# http://sdr.osmocom.org/trac/wiki/GrOsmoSDR
build_step "gr-osmosdr" "git://git.osmocom.org/gr-osmosdr.git" "master" && (
    cmake_build gr-osmosdr.git/build
)

# ------------------------------------------------------------------------
# grextras
# https://github.com/guruofquality/grextras/wiki
# build_step "grextras" "https://github.com/CorteXlab/fft-web.git" "master" && (
#     cmake_build grextras.git/build
# )

# ------------------------------------------------------------------------
# gr-baz
# https://github.com/balint256/gr-baz
# build_step "gr-baz" "https://github.com/CorteXlab/fft-web.git" "master" && (
#     cmake_build gr-baz.git/build
# )

# ------------------------------------------------------------------------
# uhd firmware update
[ "$ONLYGIT" != "0" ] && step "uhd-firmware" && (
    $INSTALL_DIR/lib/uhd/utils/uhd_images_downloader.py
)

# ------------------------------------------------------------------------
# fft-web
build_step "fft-web" "https://github.com/CorteXlab/fft-web.git" "master" && (
    (
        cd fft-web.git/grc
        grc_build_hier_block fft_web.grc
    )
)

# ------------------------------------------------------------------------
# gr-cortexlab
build_step "gr-cortexlab" "https://github.com/CorteXlab/gr-cortexlab.git" "master" && (
    cmake_build gr-cortexlab.git/build
    (
        cd gr-cortexlab.git/grc
        for GRC in *.grc ; do
            grc_build_hier_block $GRC
        done
    )
)

# ------------------------------------------------------------------------
# gr-nutaq
# --
# not available as public git repo, so the user needs to get it on its
# own (download from nutaq) and put it in the build dir, in directory
# gr-nutaq/
[ "$ONLYGIT" != "0" ] && step "gr-nutaq" && (
    # change nutaq install path in hard in CMakeLists.txt since nutaq uses normal cmake variables, which cannot be changed by user
    sed -i -e 's*set(NUTAQ_SDKROOT "/opt/Nutaq/ADP6/ADP_MicroTCA/sdk")*set(NUTAQ_SDKROOT "/cortexlab/toolchains/pico/Nutaq/ADP6/ADP_MicroTCA/sdk")*' gr-nutaq/lib/CMakeLists.txt
    sed -i -e 's*set(NUTAQ_SDKROOT "/opt/Nutaq/ADP6/ADP_MicroTCA/sdk")*set(NUTAQ_SDKROOT "/cortexlab/toolchains/pico/Nutaq/ADP6/ADP_MicroTCA/sdk")*' gr-nutaq/swig/CMakeLists.txt
    cmake_build gr-nutaq/build2 -DNUTAQ_SDKROOT="/cortexlab/toolchains/pico/Nutaq/ADP6/ADP_MicroTCA/sdk"
)

MANUAL_OPERATIONS="${MANUAL_OPERATIONS}$(cat <<EOF
- add group usrp

- add needed users in this group

- may need to reload udev rules:

  $ sudo udevadm control --reload-rules

- may need to set some sysctl. In /etc/sysctl.conf:

  net.core.rmem_max = 1000000
  net.core.wmem_max = 1000000
  kernel.shmmax = 2147483648

  and for immediate setting:

  $ sudo sysctl -w net.core.rmem_max=1000000 >/dev/null 2>&1
  $ sudo sysctl -w net.core.wmem_max=1000000 >/dev/null 2>&1
  $ sudo sysctl -w kernel.shmmax=2147483648  >/dev/null 2>&1

- may need rtprio for members of group usrp. In /etc/security/limits.conf:

  @usrp  - rtprio 50

  and logout / login to activate this

- to use the packaged gnuradio you need to source the following lines:

$SET_GNURADIO_ENV

EOF
)"

echo -e "\n------------------------------------------------------------------------\n"
echo -e "manual operations:\n"
echo -e "$MANUAL_OPERATIONS"
echo -e "\n------------------------------------------------------------------------\n"
